#!/usr/bin/env python3
# Command line utility to edit config files
# Can either be run as `config` to open a dmenu with all possible combinations
# or `config <config to edit>`

import os
import sys

try:
    home = os.environ['HOME']
except KeyError:
    print("home env variable is not setup", file=sys.stdout)
    sys.exit(1)

# Add entries here
entries = {
    "awesome": f"{home}/.config/awesome/rc.lua",
    "config": f"{home}/.local/bin/config",
    "fish": f"{home}/.config/fish",
    "git": f"{home}/.gitconfig",
    "i3": f"{home}/.config/i3/config",
    "nvim": f"{home}/.config/nvim/",
    "picom": f"{home}/.config/picom/picom.conf",
    "polybar": f"{home}/.config/polybar/config.ini",
    "qtile": f"{home}/.config/qtile/config.py",
    "ssh": f"{home}/.ssh/config",
    "sway": f"{home}/.config/sway/config",
    "tmux": f"{home}/.tmux.conf",
    "xinit": f"{home}/.xinitrc",
    "xmonad": f"{home}/.config/xmonad",
    "xresources": f"{home}/.XResources",
    "zsh": f"{home}/.zshrc",
}

# TODO: filter entries to only show existing entries

def open_dmenu() -> str:
    """ 
    Opens dmenu and request the user for ther input
    Returns the output from the user 
    """ 
    import shutil
    import subprocess
    
    if shutil.which("dmenu") is None:
        print("cannot run config without arguments when dmenu is not installed",
              file=sys.stdout)
        sys.exit(1)
    dmenu = subprocess.Popen(
        ["dmenu", "-i", "-l", str(20), "-p", "Edit config"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=sys.stderr,
    )

    stdin = dmenu.stdin
    if stdin is None:
        sys.exit(1)
    stdout = dmenu.stdout
    if stdout is None:
        sys.exit(1)

    for key in sorted(entries.keys()):
        byterepr = bytes(key + "\n", "utf-8")
        stdin.write(byterepr)
    stdin.close()

    # wait for dmenu to be closed 
    dmenu.wait()
    val = str(stdout.read(), "utf-8").strip()
    return val

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('name', nargs='?')
    parser.add_argument('-d', '--debug', action="store_true")
    args =  parser.parse_args() 

    if args.name is None:
        args.name = open_dmenu()
        if args.name == "":
            sys.exit(0)

    try: 
        entry = entries[args.name]
        if args.debug: 
            print(f"opening {entry}")
    except KeyError:
        print(f"config for {args.name} does not exist", file=sys.stderr)
        sys.exit(1)

    try:
        editor = os.environ['EDITOR']
    except KeyError:
        if sys.platform == "linux":
            editor = "xdg-open"
        if sys.platform == "darwin":
            editor = "open"

    os.system(editor +  " " + entry)

